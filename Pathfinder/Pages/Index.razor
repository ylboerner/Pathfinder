@page "/"
@using Pathfinder.Services
@using Pathfinder.Constants
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.WebUtilities
@inject ISnackbar _snackbar
@inject ICompilationService _compilationService
@inject NavigationManager _navManager

<PageTitle>PathFhinder</PageTitle>

<MudGrid Class="pt-4">
    <MudItem xs="12">
        <MudPaper Class="flex-row pt-4 pb-4 pr-4 pl-4">
            <MudTextField @bind-Value="FhirPath" TextChanged="OnInputChanged" T="string" MaxLength="-1" HelperText="Enter your FHIRPath here" Immediate="true" Variant="Variant.Text"/>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="flex-row pt-4 pb-4 pr-4 pl-4">
            <MudList Clickable="false" DisablePadding="true" Dense="@true" DisableGutters="@true">
                @foreach (var output in Output)
                {
                    <MudListItem>
                        <p style="white-space: pre-wrap;">@output</p>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="flex-row pt-4 pb-4 pr-4 pl-4">
            <MudTextField @bind-Value="Resource" TextChanged="OnInputChanged" T="string" MaxLength="-1" Label="Paste your resource as JSON or XML" Variant="Variant.Text" Immediate="true" Lines="30"/>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    private string? FhirPath { get; set; } = ApplicationConstants.DefaultFhirPath;

    private string? Resource { get; set; } = ApplicationConstants.DefaultResource;

    private IEnumerable<string> Output { get; set; } = new List<string>();
    
    protected override void OnInitialized()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("path", out var initialFhirPath))
        {
            FhirPath = initialFhirPath;
        }
    }

    private void OnInputChanged()
    {
        Output = new List<string>();
        if (FhirPath is null or "")
        {
            Output = Output.Append("FHIRPath input is empty.");
            return;
        }

        if (Resource is null or "")
        {
            Output = Output.Append("Resource input is empty.");
            return;
        }

        Output = _compilationService.Compile(FhirPath, Resource);
        Output = FormatOutput(Output);
    }

    private static IEnumerable<string> FormatOutput(IEnumerable<string> output)
    {
        // Remove quotes
        var formattedOutput = output.Select(s => s.Replace("\"", string.Empty));
        // Remove JSON formatting
        formattedOutput = formattedOutput.Select(s => Regex.Replace(s, @"[{}[\],]", string.Empty, RegexOptions.Multiline));
        // Remove blank lines
        formattedOutput = formattedOutput.Select(s => Regex.Replace(s, @"^\s+$[\r\n]*", string.Empty, RegexOptions.Multiline));
        // Remove leading whitespace
        formattedOutput = formattedOutput.Select(s => s.TrimStart('\r', '\n'));
        return formattedOutput;
    }
}