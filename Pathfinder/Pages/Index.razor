@page "/"
@using Pathfinder.Services
@using Pathfinder.Constants
@inject ISnackbar _snackbar
@inject ICompilationService _compilationService

<PageTitle>Index</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudTextField @bind-Value="FhirPathInput" TextChanged="OnInputChanged" T="string" MaxLength="1000" HelperText="Enter your FHIRPath here" Immediate="true" Label="FHIRPath" Variant="Variant.Text"/>
    </MudItem>
    <MudItem xs="12">
        <MudList Clickable="false" Dense="@false" DisableGutters="@false">
            @foreach (var output in OutputList)
            {
                <MudListItem Text=@output/>
            }
        </MudList>
    </MudItem>
    <MudItem xs="12">
        <MudTextField @bind-Value="ResourceInput" TextChanged="OnInputChanged" T="string" Label="Paste your resource as JSON" Variant="Variant.Text" Lines="30"/>
    </MudItem>
</MudGrid>

@code
{
    private string? FhirPathInput { get; set; } = DefaultValues.FhirPath;

    private string? ResourceInput { get; set; } = DefaultValues.Resource;

    private IEnumerable<string> OutputList { get; set; } = new List<string>();

    private void OnInputChanged()
    {
        OutputList = new List<string>();
        if (FhirPathInput is null or "")
        {
            OutputList = OutputList.Append("FHIRPath input is empty.");
            return;
        }
        
        if (ResourceInput is null or "")
        {
            OutputList = OutputList.Append("Resource input is empty.");
            return;
        }

        OutputList = _compilationService.Compile(FhirPathInput, ResourceInput);
    }
}
